// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: inventory/find/find.proto

package find

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Find service

func NewFindEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Find service

type FindService interface {
	GetFind(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*FindResponse, error)
}

type findService struct {
	c    client.Client
	name string
}

func NewFindService(name string, c client.Client) FindService {
	return &findService{
		c:    c,
		name: name,
	}
}

func (c *findService) GetFind(ctx context.Context, in *FindRequest, opts ...client.CallOption) (*FindResponse, error) {
	req := c.c.NewRequest(c.name, "Find.GetFind", in)
	out := new(FindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Find service

type FindHandler interface {
	GetFind(context.Context, *FindRequest, *FindResponse) error
}

func RegisterFindHandler(s server.Server, hdlr FindHandler, opts ...server.HandlerOption) error {
	type find interface {
		GetFind(ctx context.Context, in *FindRequest, out *FindResponse) error
	}
	type Find struct {
		find
	}
	h := &findHandler{hdlr}
	return s.Handle(s.NewHandler(&Find{h}, opts...))
}

type findHandler struct {
	FindHandler
}

func (h *findHandler) GetFind(ctx context.Context, in *FindRequest, out *FindResponse) error {
	return h.FindHandler.GetFind(ctx, in, out)
}
